import numpy as np

class ChannelList:
    Oxide = {
          'C': [283.7212, 425.9647, 731.2324],
          'CF': [240.075, 247.4, 255.8],
          'CF2': [248.7528, 251.7962, 259.4186, 262.9097, 270.9984, 274.9412, 279.9867, 292.3055, 321.5302],
           'CO': [283.2816, 292.5259, 302.6815, 313.3124, 312.2034, 325.0901, 329.3222, 347.8705, 388.1951, 419.798, 
                  427.1077, 450.9489, 482.5457, 483.0085, 519.0056, 560.6415, 604.2217],
          'CO2': [404.3071],
          'F': [624.1039, 635.0152, 641.6647, 677.3826, 683.5893, 685.5, 685.7388, 687.1721, 690.2784, 691.2343, 
               696.494, 703.6711, 712.7699, 720.4386, 733.1525, 740.1156, 742.2775, 755.4979, 757.4222, 760.7903, 
               775.2357, 779.8135],
          'O': [391.2, 397.2643, 407.2641, 418.8852, 464.9915, 589.1119, 615.5761, 645.9425, 725.2344, 777.163, 
                844.2948],
          'Si': [288.3406, 504.1118, 505.5063, 634.7, 637.1519],
          'SiF': [334.6755, 337.1319, 436.9495, 440.1586],
          'SiF2': [390.2339, 394.7682],
          'SiO': [230.1281, 234.4485, 241.1583, 248.3183, 266.1863, 269.0289],
          'Ar': [434.8878, 476.5331, 488.1023, 696.494, 707.0223, 738.4344, 750.4483, 751.5, 763.6781, 772.3453, 
                 794.7625, 811.4175]
          }
    SiN = {
        'C': [282.6224, 426.1933, 733.3925],
        'CF': [240.5082, 247.4495, 255.4961],
        'CF2': [248.7528, 252.0137, 259.4186, 263.3464, 271,2173, 279.9867, 292.0851],
        'F': [624.341, 635.2526, 641.9023, 677.3826, 687.411, 690.5173, 696.7332, 703.9105, 733.3925, 742.5177,
              757.6627, 760.5497],
        'O': [407.2641, 645.7048, 725.4743, 844.7788],
        'N': [673.3268],
        'N2': [310.4298, 315.5314, 326.8714, 333.7827, 380.5027, 389.5542, 394.3146, 575.4488, 585.5755, 591.4705, 
              595.7182, 601.386, 632.4046, 639.5268, 646.8934, 654.505, 662.362, 670.4651, 762.4748, 775.4766],
        'NO': [337.3553, 357.2931],
        'CN': [289.6617, 303.5661, 357.2931, 358.4164, 386.1574, 387.063, 388.4216, 418.2007, 421.6243, 585.8112,
              648.0822],
        'Si': [288.3406, 504.1118, 505.7388, 635.0152, 637.3894],
        'SiF': [334.4523, 337.3553, 437.1787, 440.3879],
        'SiF2': [390.2339, 395.222],
         'Ar': [434.8878, 476.5331, 488.1023, 696.494, 707.0223, 738.4344, 750.4483, 751.5, 763.6781, 772.3453, 
               794.7625, 811.4175]
        }

    
class WavelengthSelection:
    def __init__(self, target, search_range=0.3):
        self.target = target
        self.search_range = search_range

    def selection(self, data):
        m = True
        for byproducts in ChannelList[self.target]:
            for byproduct, wavelengths in byproducts.items():
                for wavelength in wavelengths:
                    idx = np.where(np.abs(data[0,:]-wavelength) < self.search_range)[0]
                    try:
                        MaxIdx = idx[np.argmax(data[1:, idx].mean(axis=0))]
                        if m:
                            WData = data[:, MaxIdx]
                            m = False
                        else:
                            WData = np.c_[WData, data[:, MaxIdx]]
                    except:
                        pass
        return WData
